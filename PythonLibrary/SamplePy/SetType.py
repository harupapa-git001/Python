type(set())

print(type)

s = {"nya", "wan", "piyo", "chun"}

s

print(s)#

s = set([1, False, "nya", "wan"])

s

print(s)#

s = set("nya")

s

print(s)#

'''
    集合型集合はリストやタプルのように複数の要素をまとめて扱いますが、辞書のようにミュータブルで順序の概念がありません。
    
        そして集合には「重複した要素を持たない」と言う特徴があります。
    
    集合型のデータは波括弧（{}）の中に値をカンマで区切って指定するか、"set"と言う関数で作成します。
    
    set関数は引数としてリストか文字列を受け取り、文字列を受け取った場合は一文字ずつバラして管理します。
    
    また、波括弧の中に何も指定しないと辞書として認識されるため、空の集合を作るにはset関数を使う必要があります。
    
    なお、集合はリストやタプルのような順序を持たず、辞書のような「要素のキー」も持たないため、特定の要素へアクセスすると言うことができません。

        ※常に例の通りの出力順になる訳ではありません

    次に、集合は集合同士の数学的な演算を行えます。行える演算は次の通りです。

'''

s = {1, 2, 3} - {2, 3, 4}

print(s)            #Aのみに含まれる要素

s = {1, 2, 3} & {2, 3, 4}

print(s)            #AとBで共通の要素

s = {1, 2, 3} ^ {2, 3, 4}

print(s)            #AとBのどちらかにのみ含まれる要素

s = {1, 2, 3} | {2, 3, 4}

print(s)            #AにもBにも含まれる要素

s = {1, 3} <= {1, 2}

print(s)            #BにAの全ての要素が含まれるかどうか

s = {1, 2, 3} >= {3, 4}

print(s)            #AにBの全ての要素が含まれるかどうか

'''
    続いて、リストや辞書のように集合にもいくつかのメソッドが用意されています。抑えておきたいメソッドは次の通りです。

        .add
        .update
        .remove
        .clear
        .difference
        .intersection
        .union
        
'''

s = {1, 2, 3}

s.add(4)            #要素を追加する

print(s)

s = {1, 2}

s.update({3, 4})    #集合同士を結合する

print(s)

s = {"a", "b", "c", "d"}

s.remove("b")       #指定した要素を削除する

print(s)

s = {1, 2, 3}

s.clear()           #全ての要素を削除する

print(s)


#---------------------------------

s = {1, 2, 3} - {2, 3, 4}

print(s)

{1, 2, 3}.difference({2, 3, 4}) # "-"での演算と同等

print(s)

#---------------------------------


s = {1, 2, 3} & {2, 3, 4}

print(s)

{1, 2, 3}.intersection({2, 3, 4})   # "&"での演算と同等

print(s)

#---------------------------------


s = {1, 2, 3} | {2, 3, 4}

print(s)

{1, 2, 3}.union({2, 3, 4})  # "|"での演算と同等

print(s)

#---------------------------------

'''
    最後に、リストや辞書と同じように集合にも内包表記が用意されているので、ここでも記述方法を例で確認しましょう。

'''

s = {i * 2 for i in range(3)}

s

print(s)

s = {i * 2 for i in range(6) if i % 2 == 0}

2

print(s)

s = {i * 2 if i % 2 == 0 else i * 3 for i in range(6)}

s

print(s)

'''
    集合の内包表記は辞書とそれと比べて「キーの指定が無い」点以外は同じ書き方をします。
    これも実際のコーディングでの出番は少ないと思われますが、辞書と同じく「集合にも内包表記がある」と言うことは覚えておくようにしましょう。


'''
