'''
    インタラクティブなプログラムの作成今までのプログラムは「ユーザーがプログラムを起動したら処理を実行し、それが終われば終了」というものでした。
    
    ただ、なかにはこれにそぐわないプログラムもあります。たとえばGUIのアプリケーションを想像してください。
    
    だいたいはボタンを押したりテキスト入力をしたりして使い続けて、必要がなくなった時点でウィンドウを閉じるなどして終了します。
    
    これは「インタラクティブなプログラム」と呼ばれており、以下の処理を繰り返すことで実現されています。
    
    1. ユーザーからの入力をアプリケーションが待つ
    2. ユーザーからの入力に応じてアプリケーションがなんらかの処理を行う
    3. 処理が終わると1に戻る
    
    これと同じことは、CLIのコンソールでもできます。
    
    その一番簡単な仕組みは以下の図のようのものとなります。

    #無限ループ
    
    while(True):
        #ユーザなどからの入力
        
        input_text = input()
        
        入力内容に応じた処理
        
        これも実例を用いて説明したほうがはやそうなので、簡単なサンプルプログラムを使います。
        
        以下のサンプルでは「あるプログラムの設定ファイルを書き出すプログラム」を作成します。
        
        設定ファイルは以下のようなものとします。

    username = taro
    
    password = my_password
    
    server = 10.0.0.1
    
    プログラムの流れは以下のようなものとなります。
    
    1. 最初に入力可能なオプションを示し、input()で待機
    2. ユーザーが入力
    3. ユーザー入力を読み取り、適切な入力であればそれを設定。不適切であればエラー表示
    4. exitと入力されれば終了し、内容をファイルに書き出す(終了条件)

    これをプログラムにすると以下のようなものとなります。

'''

username = ''

password = ''

server = ''

while(True):    #無限ループ

    print('''please input option and its value.
    
    u USE_NAME
    
    p PASSWORD
    
    s SERVER_IP
    
    exit''')
    
    line = input()  #ユーザーからの入力を取得
    
    if(line == "exit"): #無限ループから離脱する
    
        条件
        
        break
        
    words = line.split()    #ユーザーからの入力内容をチェック
    
    if(len(words) != 2):
        print("Error")
        
        continue
        
    if(words[0] == "u"):    #入力内容に応じた処理
    
        username = words[1]
        
    elif(words[0] == "p"):
        password = words[1]
        
    elif(words[0] == "s"):
        server = words[1]
        
    else:
        print("Error")
        
#ループ終わり

print("username = " + username)

print("password = " + password)

print("server = " + server)

'''
    今回は書き出す代わりにprint出力させています。
    
    先に提示した処理手順と完全に同じではありませんが、ユーザーが入力した内容に応じて処理を行うということを繰り返します。
    
    実際のプログラムでは処理をマルチスレッド(複数の処理を別々のタイムラインで実行)などとすることもありますが、この「入力 >処理 >入力 >……」という処理の流れは非常に重要なので覚えておいてください。
    
    バッチ処理以外のGUI(ボタンなどが押される >なんらかのアクション)やサーバ(ネットワーク越しにクライアントの要求を受け取る >アクション)のプログラミングも基本的にはこの流れとなり、このような処理方式を「イベントドリブン」と呼びます。
    
    このイベントドリブン型のプログラミングはある程度プログラムが書けるようになると頻繁に使うロジックになるはずです。
    
    ただ実際には、利用するフレームワーク(自分のプログラムを呼び出す親分プログラムみたいなもの)などに隠蔽されていたりしているので、あまり意識しないことが多いかもしれません。

'''
