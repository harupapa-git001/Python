'''
    テキスト処理テキスト処理は要するに、文字列型の処理です。
    前の章で扱ったように文字列型もオブジェクトであるため、様々なメソッドが利用できます。
    テキストファイルの処理では文字列型の基本知識が必要なので、以前学んだことを少し発展させて復習します。
    
        まず、文字列は以下のように定義するのでした。

'''

text1 = "hello python"

text2 = '''hello

world

python'''

print(text1)

print(text2)

'''
    ひとつめに関しては今さらいうこともないですが、2つめに関しては複数行でテキストをプログラム中で定義する方法でした。
    記号「'」の代わりに記号「"」を使うことも可能ですが、文字列の前後で統一されている必要があります。
    文字列の結合に関しては「+」記号でできますが、数字などを結合するときは「文字列に変換」してから結合するのでした。
    
       ほかの型から文字列型への変換にはstr関数を使います。

'''

print("hello " + "world")

a = "WORLD"

print("hello " + str(a))

#文字列長は以下のようにlen()関数を使う事で取得できます

length = len("hello world")

print(length)

#文字列中の「文字」の取得は以下のように[X]で位置を指定しておこないます。

text = "hello world python"

print(text[4])

print(text[-4])

#print(text[100])

'''
    この位置の指定はリストの要素の数え方と同じで0から始まります。先頭から0、1、2……と数えていくと4はoに対応しています。
    面白いのがこの値をマイナスにできるところです。このように指定すると後ろ側から取得してきます。
    この際、0からではなく1、2、3……とカウントすることに注意してください。文字列の範囲を超えてアクセスしようとするとエラーになります。
    
        文字列から「文字列」を取得するには、以下のように行います。

'''

text = "hello world python"

print(text[6: 11])

print(text[-12: -7])


'''
    これは「スライシング」と呼ばれるテクニックで、[X:Y]とあるとXからYまで取得という意味になります。
    
       [X:Y]と指定する際はX< Yとなるようにしてください。
    
       先ほどと同じように、範囲指定にもマイナス値を利用できます。
    前と後ろを指定するのではなく、Xより前、Xより後という指定の仕方も可能です。

'''

print(text[6:])

print(text[:11])

print(text[:])

'''
    見ていただくとわかるように [X:Y]の片方を省略しています。
    
    そうすると先頭から、もしくは末尾までという意味になります。
    あまり使いどころはありませんが、両方とも省略すると、文字列のすべてが取得されます。
    
    このスライシングはリストから複数の要素を取り出す際にも使えます。

'''
