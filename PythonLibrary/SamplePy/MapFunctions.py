'''
    map次にmap関数です。
    こちらはリストの各要素に関数を適用していき、適用された値をリストにするというものです。
    filterオブジェクトと同様に返される値はマップオブジェクトであるため、それをリストにキャストしてあげる必要があります。
    
    やっていること自体は難しくないので、こちらも例を示します。
    以下では range関数で作成した [0,1,2,..8,9]というリストの要素を2倍にしています。


'''

'''ex1

map_object = map(lambda x : x * 2, range(10))

print(list(map_object))

'''

'''
    適用する関数を mapの第一引数に与え、関数が適用されるリストは第二引数に与えられています。filter関数と同じです。

'''

'''
    先の filterや mapでは比較的単純な例でしたが、四則演算だけでなくメソッドで処理を加える事もできます。
    ラムダの引数に対してメソッドを呼び出し、テキストデータを大文字にしています。


'''

'''ex2

text_list = ["ab", "cd", "ef"]

map_object = map(lambda x : x.upper(), text_list)

print(list(map_object))

'''

'''
    テキストを大文字にすることもそれほど難しくない処理ですが、たとえば自分で作ったクラスについてこれを適用することもできます。
    便利といえば便利なのですが、自分以外にその処理がなにをやっているか分からなくなるため、適切なコメント等を残すか、使わないという選択をする必要があると思います。
    返り値のリストが不要で単にオブジェクトのメソッドをまとめて呼びたい場合は for文を使うことが無難です。

    なお、mapや後ほど扱うリスト内包表記といったリストを生成する処理は必ずしも元のリストの値を使う必要はありません。
    たんに「ある長さのリストを生成する」ためにも使えます。たとえばランダムな数値を持つリストを生成する場合、以下のようなコードとなります。

'''

import random

#普通の関数

def get_random_list1(length):
    random_list = []
    
    for i in range(length):
        random_list.append(random.randint(0, 100))
        
    return random_list
    
#map関数を使った関数

def get_random_list2(length):
    return list(map(lambda x : random.randint(0, 100), range(length)))

print(get_random_list1(10))

print(get_random_list2(10))

'''
    get_random_list1関数は for文を使って与えられた長さのぶんだけループを回し、それでランダムに生成された数値をリストに詰めて返しています。
    
    一方、get_random_list2は同じことを mapで実現しています。
    for文で要素の iを使わなくていいように、mapに渡された関数もその引数を使わなくて構いません。
    こういうことをできると知っておくべきかと思いますが、コードを読む人にとって分かりにくいため積極的に使うようなテクニックではないかもしれません。

'''
