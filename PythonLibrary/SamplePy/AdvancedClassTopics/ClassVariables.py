'''
    クラスの高度なトピック
    
    この章では今まで扱わなかったクラスの高度なトピックについて扱います。
    
    それらは初心者にとってはオブジェクト指向を実現するうえで必ず必要なものではないものの、中級者以上のコードを読み書きする際に必要となることがあります。
    
    まずは「こういったこともできる」という程度のものかと認識していただければ十分です。
    
    クラス変数今までのクラス内での変数は「インスタンス変数」であり、インスタンスごとに独立したものでした。
    
    クラスにはインスタンス変数に加えて「クラス変数」というものがあり、それは全てのインスタンスで共有されています。
    
    つまり同じクラスから作成されたインスタンス a, bがあるとすると、aがその変数を変更すると bのものも変更されるということです。
    
    以下にインスタンス変数とクラス変数を使ったサンプルコードを記載します。

'''

class MyClass:
    #クラス変数の定義
    
    a = "A"
    
    def __init__(self):
        self.b = "B"
        
    def set_ab(self, a, b):
        #クラス変数の利用
        
        MyClass.a = a
        
        self.b = b
        
    def print_ab(self):
        print(MyClass.a)
        
        print(self.b)

'''
    コメントにあるように上記の変数 aがクラス変数で、変数 bが今まで使っていたインスタンス変数です。
    
    使い方を見てもらうと分かりますが、クラス変数の定義はクラスの直下(メソッドと同じブロック)で行い、定義したクラスを利用するには「クラス名.変数名」としています。
    
    定義と利用はそれほど難しくないと思うので、さっそくクラス変数を使ってみます。
    
    上記コードにある set_abメソッドでクラス変数とインスタンス変数を更新し、print_abでその中身を確認します。

'''

mycls_a = MyClass()

mycls_b = MyClass()

mycls_a.print_ab()

mycls_b.print_ab()

#クラス変数とインスタンス変数を更新

mycls_a.set_ab("AA", "BB")

mycls_a.print_ab()

mycls_b.print_ab()

'''
    インスタンス化された直後のクラス変数とインスタンス変数は初期状態のため、2つのインスタンスで値は全く同じです。
    
    そのあとで片方のインスタンスに対して set_abで値を更新し、両方のインスタンスの2つの変数 a, bの値を確認するとクラス変数のみ変更を加えていない側のインスタンスでも更新されていることがわかります。
    
    この特性から全てのインスタンスで共有したい値にはクラス変数を使い、各インスタンスで独立した値を持ちたい場合はインスタンス変数を使えばいいことが分かります。
    
    なお、クラス変数はインスタンスに依存しないため、クラスから直接呼び出すこともできます。
    
    たとえば先程のクラスだと以下のようになります。

'''
#インスタンスから呼び出し

mycls_a = MyClass()

print(mycls_a.a)

#クラスから直接呼び出し

print(MyClass.a)

'''
    クラス外に定義されている変数や関数はグローバル空間に属しています。
    
    前書で説明した global宣言なども関わってくるため、値のアップデートは極力避けて参照をするのみにしてください。

'''
