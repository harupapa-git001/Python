'''
    reduce最後にreduceです。
    これは「たたみ込み」と呼ばれる処理で、別言語だとfoldなどという呼び方をしているかもしれません。
    mapやfilterに比べるとちょっと複雑で、利用場面はそれほど多くないと思います。

    リストの「要素N番目の処理結果をN+ 1番目で利用」ということをリストの先頭から末尾まで繰り返していき、最後の処理結果を返すというものです。
    
    書き下すと、
    
    1. 1番目と2番目の要素を使いAを得る
    2. 3番目とAを使いBを得る
    3. 4番目とBを使いCを得る
    4. 最後の要素である5番目とCを使いDを得る
    5. Dを返す
    というような動きになります。
    
    上記の図を実現するコードを以下に示します。
    
    なお、python2は reduceをグローバル関数として利用できましたが、python3では functoolsというモジュールに属するようになっています。

'''

'''ex1

import functools

def adder(a, b):
    return a + b
    
result = functools.reduce(adder, range(1, 7))

print(result)

'''

'''
    プログラムもfilterやmapと同じように、関数の定義をリストに適用します。
    ただ、引数に与える関数の引数が2つになっているのが今までと異なる点です。
    今回は分かりやすいように関数を定義しましたが、簡単なものであればラムダが使われることが多いです。
    この reduceなのですが、先ほどのような「リストの全ての要素を使って値を得る」というものよりも「リストの中から何かひとつの要素を選ぶ」といった使い方のほうが多いかもしれません。
    そのようなときは「引数で与えられた2つの関数を比較し、条件に合致するほうを返す関数」を定義し、それをリストに対して reduceで適用するということをします。
    そうするとリストの全要素に対してその関数が適用され、最も条件にあうリストの要素が取得できます。
    以下のサンプルでは「2値を比較して大きい方を返す処理」を繰り返してランダムに生成された数値のリストから最大値を選ぶという処理をしています。

'''

import functools, random

#２値を比較して条件位合致した方の値を返す（今回は大きい方を返す）

def get_bigger(a, b):
    if(a > b):
        return a
        
    else:
        return b
        
#ランダムな数値をリストに詰める

random_list = []

for i in range(10):
    random_list.append(random.randint(0, 100))
    
#リストの中で最も条件位合致する要素を返す

biggest = functools.reduce(get_bigger, random_list)

print("list: {}".format(random_list))

print("biggest: {}".format(biggest))

'''
    今回は数値のような簡単な例でしたが、2値の比較は複雑なオブジェクトに対しても実現できます。
    for文でリストから要素を取得するのが王道なのでしょうが、reduceでも同様のことができるというのは覚えておいて下さい。
    
    関数型を使えるプログラマがよく使うテクニックです。

'''
