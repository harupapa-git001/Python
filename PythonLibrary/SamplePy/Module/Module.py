# import モジュール名

import math

math.floor(5.5)

print(math.floor(5.5))

'''
        モジュール内の関数を呼び出すには"モジュール名.関数()"とします。
    mathモジュールに含まれる関数であれば全て「math.関数名()」という形で呼び出します。
    importされるモジュール名が長かったりわかりにくかったりする場合はそれに別名を付けることが可能です。それは以下のように行います。

'''

'''# Module.pyを全体として実行する際にはlabel.mainloop()以降が読み込まれないため、この項目をコメントアウトしてご利用ください。(python Module.py実行後は出力ラベルのxボタン押下で以降のプログラムを実行して出力を返します。)

# import A as B

#モジュールAをBとしてimport

import tkinter as tk

font = ("Helevetica", 32, "bold")

#呼び出しはtk

label = tk.Label(text = "Hello Python", font = font, bg = "red")

label.pack()

label.mainloop()

'''

'''
    上記例では tkinterと呼ばれている GUIのモジュールを tkとして importしています。
    モジュールの関数を呼び出すたびに毎回モジュール名を書くのが面倒であれば「from」を使うことで、モジュール内の関数をモジュール名なしで呼び出すことも可能になります。

'''

# from モジュール名　import 関数名

from math import floor

print(floor(5.5))

'''
    頻繁に使う関数であればこのように使用しても構いませんが、一般的には fromを使わずに importのみを行うほうが分かりやすいコードになります。
    なぜならその関数がどのモジュールに属しているかひとめで分かるからです。先ほどの 「importAas B」とこの fromを組み合わせることであるモジュールに属する関数を別名で使うこともできます。

'''

# mathモジュールのfloor関数をfとしてimport

from math import floor as f

print(f(5.5))

'''
    2つのモジュールが同名の関数を持っていて、2つとも使いたいといった場合に利用可能ですが、そのような状況ではモジュール名ごと関数を書くほうが賢明かと思います。
    モジュール内の関数すべてをモジュール名なしで呼び出すには以下のようにワイルドカードを使います。
    ただ、このような乱雑なモジュールの利用法は「名前の衝突(同じ名前が２箇所で使われてしまっている)」などの問題が発生しかねないので、あまり推奨できません。

    あるモジュールをテストするといったシナリオでは有効な使い方ですが、本番環境用のコードでは使用しないほうがよいです。

'''
