# util_main.py

import util

util.say_hello()

util.say_python()

'''
    main.pyを実行すると以下のような出力が得られ、Pythonのプログラムのファイルが別の Pythonのプログラムのファイルを呼び出していることが分かります。

       hello!
       python!
       
       特別に難しいことはありませんね。
       モジュールを書くにあたって注意すべきすることは、モジュールが以下の特性を持っているかということです。
       再利用可能か似た処理のみをまとめているかたとえば標準ライブラリで提供されていない特殊な数値計算が必要なら、その計算のためのモジュールを作ってもよいでしょう。
       ただ、そこに特殊な文字列処理であったり、ネットワークの処理も書いたりするというのは誤った設計です。
       
          数値計算のモジュールであればそれに徹するべきです。
       
          文字列処理、ネットワークの処理についても同様です。
       また、そのモジュールを誰しもが簡単に使えるようにすることが理想です。
       例えばよくわからない名前の関数を作っていたり、変な副作用などがあったりすると扱いに困ります。
       実際は複雑なプログラムを分割するためだけにモジュール化することも多いのですが、それでも「使いやすい」ように書くことを心がけておくといいかもしれません。
       
          なお、実行するプログラムからモジュールが見つからずにエラーとなることがたまにあります。
          サンプルを試す際に「両ファイルは同じディレクトリで作成し、そのディレクトリ内でプログラムを実行してください」とお願いしたのはこの問題を防ぐためです。
          モジュールの探索には規則があり、それを知ることで別の場所にあるモジュールを読み込むこともできます。

'''
