import nice

import world

print("hello.py: " + __name__)

'''
    コードを読んでもらえば分かりますが、hello.pyは nice.pyと world.pyをimportしています。
    nice.py及び world.pyはモジュールとして使われることを想定していますので、簡単な関数の定義を持っています。
    そしてそれらのファイルは最後にモジュール名のプリントをしています。hello.pyを起点に呼び出すと以下のような出力が得られます。

    $ python3 hello.py
    
    nice.py: nice
    world.py: world
    hello.py: __main__
    
    出力を見てもらうと分かりますが、importされたモジュール内にある特殊変数 __name__ にはファイル名(モジュール名)が入っています。
    ただ、起点となるファイルの __name__だけはファイル名ではなく __main__となっていることが分かります。
    この __name__の性質を利用して、そのモジュールが起点として呼ばれた場合のみ特定の処理をすることができます。


        test.pyを呼び出している実行結果を参照してみてください。

'''
import test             # test.pyでの__name__と__main__判定出力

print(test)

def fun_test(x):
    return x ** 2
    
if(__name__ == "__main__"): # hello.pyでの__nameと__main判定出力
    print("start function tests")
    
    if(4 != fun_test(2)):
        print("error")
        
    if(9 != fun_test(-3)):
        print("error")

'''
    上記のコードは __name__がもし __main__だった場合、つまりこのモジュールが起点としてプログラムが起動された場合にモジュールで定義された関数をテストしています。
    このモジュールが呼び出されるたびにいちいちテストをするのは問題ですが、モジュールとして使われるプログラムを起点と呼び出した場合にだけテストをするというのは理にかなっています。
    
    この書き方は様々なところで使われているので、ぜひ覚えておいて下さい。

'''

'''
    モジュール紹介Pythonには数え切れないほどのモジュールがあります。モジュールには大きく分けて2つあり、標準モジュール、及び外部のモジュール(インストールなどが必要)があります。
    
       ここでは最重要なモジュールのみ駆け足で紹介します。

       まず Pythonの環境自体に関わる sysモジュールがあります。
       インタプリタとしての挙動に関わる関数を多く持ち、たちえば sys.exit()はプログラムを終了させます。
       他には標準入出力や標準エラー出力を扱う機能も持っており、sys.stdin.read()や、sys.stdout.write(),そしてエラー出力の sys.stderr.write()があります。
       改行なしの print文を使いたい場合は改行をしないオプションを加える(後述します)か、代わりに sys.stdout.write()を使うという方法があります。

'''

import sys

print("hello")

print(" pyhon")

print("\n")

sys.stdout.write("hello")

sys.stdout.write(" python")

print("\n")

'''
    出力を見てもらうと分かりますが、sys.stdout.writeは出力後に改行されていません。
    改行なしでコンソールに出力をしたい場合は使ってみて下さい。次に OSに関わる処理として OSモジュールがあります。
     OSモジュールはちょうどターミナルや DOS Prompt、power shellのようなシェルを使ったファイルやディレクトリの操作に近いことができます。
     
     例えば以下のようなものとなります。

'''

import os

#現在のディレクトリを取得

os.getcwd()

print(os.getcwd())

#ディレクトリを移動

os.chdir("Module")

print(os.getcwd())
#ディレクトリの中身を確認

os.listdir("./")

print(os.listdir())

#ディレクトリを作成

#os.mkdir("mkdir")  # Moduleフォルダ内にディレクトリがないことを確認してから実行してください。

#ディレクトリを削除

os.rmdir("mkdir")    #ディレクトリ作成を確認してから削除してください。


'''
    osモジュールは子モジュールも持っており、たとえば os.pathモジュールはパス関係の処理をできます。
    他には時間関係の timeモジュールや数学関係の mathモジュールなどもよく利用されます。
    
       それらの使い方の詳細は適時Pythonの公式ドキュメントなり、webサイトや書籍を参照してください。
       Pythonのモジュールの数は膨大ですが、プログラマが実現したい処理は一般的なことであればたいがいは既になんらかの形で提供されています。
       どういうものがあるか手を動かしながら試し、概観を掴んでしまえば簡単にそれらを利用できるようになるはずです。
       ただ、提供されるモジュールやライブラリはPythonやプログラミングの最低限の知識を必要とする場合が多いです。
       モジュールの詳細について学ぶ前に、まずは Pythonやプログラミングの基礎知識を身につけることに注力するのがよいと思います。

'''
