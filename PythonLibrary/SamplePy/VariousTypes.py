'''
    様々な型
    本章では必ずしも使う必要はないものの、知っていると便利な型について扱います。
    
       具体的には「タプル」、「セット」、「辞書(マップ)」となります。
    
       タプルリストという型がなぜ存在するのか覚えていますか。
    ひとつの型のなかに任意の数の複数のデータを格納できると便利だからでした。
    
       たとえば「生徒たちの成績を格納する」といった目的で利用されます。
    タプルもリストと似ていて、ひとつの型のなかに複数のデータを格納します。
    
       ただ、その目的は異なっていて、「決まった数の複数のデータがひとつの意味を持つもの」にタプルは使われます。
       
       例をあげて説明しましょう。
       
       お店の会員情報というものをデータで表現することを考えてみます。
       例えば 'taro,1986,tokyo' といった具合で単純に文字列としてすべてを含めてしまってもいいのですが、以下のような複数の要素を持つデータとして表現したほうがプログラムで使いやすそうです。
       氏名生年月日住所テキスト処理で文字列の中から生年月日を抜き出したりするよりも、「Aさんの住所 >東京都…」というようにぱっと取り出せる方が便利です。これはちょうど先ほど説明したオブジェクト指向におけるメソッドがないクラスのようなものです。
       
       タプルは上記のような複数のデータをひとつにまとめるための型です。
       Pythonのリストは様々な種類のデータを格納することができるため、同じことをリストでも実現できます。
       ただ、リストは「可変長(長さが変わる)」なので、複数のデータが合わさってはじめて意味を持つ場合の利用は本来の用途ではなく、それよりも同じデータをいくつも格納する用途で使われます。

    タプルがどういうものかわかっていただけたと思うので、具体的にどのように使うのか説明しましょう。
    タプルの作成はタプルの要素となる値を ()で囲むことで作成できます。type関数は型を確認するために利用する関数です。

'''

a = ("taro", "1986", "tokyo")

print(type(a))

'''
    上記は先ほどの会員情報のタプルです。その要素への参照はリストに似ています。

'''

a = ("taro", "1986", "tokyo")

print(a[0])

print(len(a))

for i in a:
    print(i)

'''
    ただし、リストと異なり一度作成されたオブジェクトは変更することはできません。

'''

a = ("taro", "1986", "tokyo")

#a[0] = 5   #エラー文

'''
    少しトリッキーな見た目ですが、タプル内の要素を一気に取得することもできます。

'''

a = ("taro", "1986", "tokyo")

(b, c, d) = a

print(b)

print(c)

print(d)

'''
    タプルはC言語でいう「構造体」やJavaでいう「クラスのメンバ関数」の簡易版として使うのが主な用途です。
    ただし、構造体やメンバ関数はそれぞれ「変数名」を持っているのに対して、タプルは「何番目にある要素か」ということを基準にしてデータを管理します。
    最後にタプルの便利な使い方を紹介します。あまり機会は多くないのですが、関数の返り値を2つ返したい場合がときどき発生します。
    一つひとつ別の関数に分けて値を取得するようにすることもできますが、たとえばfor文での探索のようなプログラムだと計算コストが高いため、無駄に2周するのは避けたほうがよいです。
    
       そのようなときにタプルをreturnで使うと便利です。
       たとえば、リストの要素の最小値と最大値を取得する関数だと、返り値は2つ返したいところです。
       
       そのような場合は以下のようにすれば大丈夫です。

'''

def get_min_max(list_):
    min_ = a[0]
    
    max_ = a[0]
    
    for i in list_:
        if(i < min_): min_ = i
        
        if(max_ < i): max_ = i
        
    return(min_, max_)
    
a = [5, 8, 1, 4, 10, 3, 7]

(min_, max_) = get_min_max(a)

print("min: {}".format(min_))

print("max: {}".format(max_))

'''
    返り値をタプルにした際は、タプルの構造に気をつけて利用してください。
    たとえ関数の返り値のタプルの形式が変更されたにもかかわらず、それを利用する側が変更されなければエラーとなります。
    複雑な形式をやりとりしたいのであれば、続編で扱うクラスなどにしてしまうほうがよいです。
    
    セット
    
    次は「セット」です。
    
    セットを一言で説明すると、「集合」という概念を実現するための型です。
    
    たとえば、ある空の集合にAを追加すると、その集合にはAがあります。
    
    さらにBを追加するとA、Bの2つが存在します。
    しかし、ここにさらにAを追加しても、「A、A、B」とはならずに「A、B」のままです。
    そして集合は「順序を持たない」ので「A、B」も、「B、A」も同じ意味を持ちます。
    セットの内部実装には非常に重要な概念があるのですが、とりあえず使い方を説明してしまいます。
    
    空のセットのオブジェクトを作るにはset() 関数を使います。
    
    空でない場合は{}に要素を並べることで作ることもできます。
    もしくはリストのデータをset関数に渡すことで、中身のあるセットを作ることもできます。

'''

a = set()

print(a)

b = {1, 2, 3}

print(b)

c = set([1, 3, 5, 7])

print(c)

'''
    空のセットを作る際に注意して欲しいことは「変数 ={}」 としてしまうとセットではなく次に説明する「辞書型のオブジェクト」が作成されてしまうということです。
    
       セットへの要素の追加にはadd、削除にはremoveメソッドを使います。

'''

a = {1, 2, 3}

a.add(4)

print(a)

a.add(2)

print(a)

a.remove(1)

print(a)

'''
    リストのデータ追加のメソッド名を覚えていますか。
    addではなく、appendや insertでしたね。日本語で言うと同じ「追加」であっても、addだと「集合に加える」という感じで、appendだと「末尾に加える」という意味合いになります。
    
    順序を持たない set型なので、addというメソッド名となっています。
    
    そして removeメソッドを使うと指定した値をセットから取り除きます。
    
    存在しない値を指定するとエラーになるので注意してください。
    
    セットの使い方はリストに似ています。

'''

# in, not in を使える

a = {1, 3, 5, 7}

print(1 in a)

print(2 in a)

# popを使える（何が返ってくるかは分からない）

b = a.pop()

print(a)

print(b)

# forも使えるが順序は不明

for i in {1, 3, 5, 7}:
    print(i)

'''
    リストと若干異なるのはセットの結合です。
    先程説明したようにセットは重複した要素を持たないため、結合される2つのセットが同じものを持っていれば1つだけになります。
    
    プラス記号を使った結合はできません。

'''

a = {1, 2, 3}

a.union({3, 4, 5})

print(a)

#print(a + {5, 6, 7})   #エラー文

'''
    あまり利用場面は多くないかもしれませんが、集合特有の演算をすることもできます。

'''

#比較

print({1, 2, 3} < {1, 2, 3, 4})

#AND（両方含むもののみ）

print({1, 2, 3} & {3, 4, 5})

#OR（結合）

print({1, 2, 3} | {3, 4, 5})

'''
    セットの使い方はわかっていただけたでしょうか。
    追加や削除、有無のチェックなどの機能を見ると、なんだかリストに似ているような気がしたかもしれませんが、両者の仕組みはまったく異なっています。


'''
