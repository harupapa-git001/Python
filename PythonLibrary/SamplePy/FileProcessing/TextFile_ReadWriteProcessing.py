#実行前にtext2.txtにHelloと書かれているか確認して実行してください。（123456と上書きされてしまいます。）



'''
    テキストファイルの読み書き処理実際に pythonでテキストファイルの処理をどのようにするか紹介します。
    
    先ほどのテキストファイルの処理方法さえ理解してしまえば非常に簡単です。
    
    以下の内容が書かれたファイル text1.txtがあるとします。

    world
    
    python
    
    java
    
    このファイルに書かれている各行にhelloを加えて表示するサンプルを書いてみます。

'''
#text1.txtをTestFile_ReadWriteProcessing.pyと同じディレクトリに置いて実行してください。

f = open("text1.txt", "r")

print(type(f))

for line in f:
    print("hello " + line)
    
f.close()

'''
    まずファイル 'txt.txt'をモード 'r(読み)'でオープンしています。
    
    オープンしたファイルオブジェクトに対してfor文を使うと1行1行取得できるので、行ごとにprintする処理をしています。

    print文の改行に加えてもとのテキストの改行コードも表示されるので業の間にもう1行スペースがあいてしまっていますが、この回避方法については先に説明した sys.stdout.write()を使うか後述する print文の出力オプションを使います。
    
    ほかにはファイルを丸ごと読む方法もあります。

'''

f = open("text1.txt", "r")

text = f.read()

print(text)

lines = text.split("\n")

print(lines)

f.close()

'''
    ファイルオブジェクトに対してreadメソッドを使うことで、その中身をすべて文字列として取得します。
    
    それを行ごとに処理したいのであれば、文字列を先に説明した改行コードで分割することで行ごとのリストになるので、それに対して処理を行うことができます。
    
    この処理方式はファイルを全て読み込むため、容量の大きなファイルで実行しようとするとリソースを使いすぎてエラーになる可能性があります。
    
    小さいファイルであれば問題無いですが、注意して利用して下さい。

    次にファイルへの書き込み方法について説明します。
    
    書き込みも読み込みと大差ありませんが、ファイルをオープンする際に書き込みモードを指定します。
    
    以下のテキストが既に書かれているテキストファイルtext2.txtに 123456と書き込みをするとします。

    Hello
    
    書き込みのコードは以下となります。
'''
#実行前にtext2.txtにHelloと書かれているか確認して実行してください。（123456と上書きされてしまいます。）

f = open("text2.txt", "w")

f.write("123")

f.write("456")

f.close()

'''
    コードを見てもらうと想像がつくとは思いますが、openの第二引数が書き込みモードの 'w'となっています。
    
    そしてファイルオブジェクトにたいしてwriteすることで、実際にファイルに書き込み処理がされています。
    
    そして最後にクローズするのは同じです。書き込みされたファイル text2.txtは以下のようになりました。

    123456
    
    見てもらうとわかるように、もともとのテキストであるHelloが消えています。
    
    ファイルが上書きされていることがわかります。
    
    ただ、場合によっては「追記(もとの中身を残したまま後ろに加える)」しないといけないこともあります。
    
    その場合はファイルをオープンするモードを 'a'の「追記」にすれば実現できます。
    
    モードのみ修正して以下のコードにしてみます。

'''
#実行前にtext2.txtにHello（または123456）と書かれているか確認して実行してください。（123456123456と上書きされてしまいます。）

f = open("text2.txt", "a")

f.write("123")

f.write("456")

f.close()

'''
    これを実行すると、
    
    123456123456
    
    となりました。
    
    もとの '123456'は残ったままで、その後ろに '123456'が新しく追加されています。
    
    ファイルのオープンごとに以前の内容が消えないので、アプリケーションのログなどを取る際に便利な手法です。
    
    なお、書き込みを「次の行」にする場合は改行コード”\n”をファイルに書き込めばそこで改行されます。

'''
