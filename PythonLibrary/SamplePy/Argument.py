'''
    ７．引数関数の引数は定義の仕方によっていくつかの種類に分類されます。
    
    ■通常の引数
    特別な書き方をせず、名前のみを記述した引数です。この種類の引数は関数呼び出しの際に必ず値を渡さなければなりません。

'''
#通常の引数

def fnc1(a):
    pass
    
def fnc2(a, b): #a、bは通常の引数
    pass
    
'''
    ■デフォルト値付きの引数
    イコールで値を指定した引数です。この種類の引数は関数呼び出しの際に省略することができます。
    なお、デフォルト値付き引数を定義すると、それ以降には通常の引数を定義できなくなります。

'''
#デフォルト値付きの引数

def fnc1(a, b = 1): #bはデフォルト値付きの引数
    return a + b

print(fnc1(1))  #2

print(fnc1(1, 2))   #3

#これはOK

def fnc2(a, b = 1, c = 1):
    pass
    
#これはNG

#def fnc3(a, b = 1, c):
    pass
    
'''
    ■可変長の引数
    
    名前の前にアスタリスク（*）を付けた引数です。
    
    この種類の引数は関数呼び出しの際にn個の値を指定することができます。

    また、関数側ではこの引数はタプルとして受け取ります。

'''
#可変長の引数

def fnc(a, b, * args):
    print(a, b, args)
    
fnc("a", "b", "c", "d", "e")    #a b("c", "d", "e")

fnc("a", "b")   #a b ()

'''
    ■キーワード付きの可変長引数
    
    名前の前にアスタリスク（*）を２つ付けた引数です。
    この種類の引数は関数呼び出しの際にn個の値を指定することができますが、それぞれに対してキーワードを付けなくてはなりません。
    
    また、関数側ではこの引数は辞書として受け取ります。

'''
#キーワード付きの可変長引数

def fnc(a, b, **args):
    print(a, b, args)
    
fnc("a", "b", arg = "c", arg2 = "d")    #a b {"arg1": "c", "arg2": "d"}

fnc("a", "b")   #a b {}

#これはNG

#fnc("a", "b", "c")  #エラー

def fnc_t(a, b, c, **args):
    print(a, b, c, args)
    
fnc_t("a", "b", "c")

fnc_t("a", "b", "", arg = "d", arg2 = "e", arg3 = "f", arg4 = "g")

#fnc_t("a", "b", arg = "d", arg2 = "e", arg3 = "f", arg4 = "g")

'''
    ■引数名の指定が必須の引数
    
    アスタリスク（*）より後に定義されている引数です。
    
    この種類の引数は必ず引数名を付けて呼び出さなければなりません。
    なお、引数に書いたアスタリクスそのものには値を渡したり参照したりすることはできません。

'''
#キーワード指定が必須の引数

def fnc(a, b, *, c, d):
    print(a, b, c, d)
    
fnc("a", "b", c = "c", d = "d") #a b c d

#順番は無視できる

fnc("a", "b", d = "d", c = "c") #a b c d

#存在しない引数名はNG

#fnc("a", "b", c = "c", x = "d") #エラー

#引数名をつけないのもNG

#fnc("a", "b", "c", d = "d") #エラー

#全ての引数名の指定が必要な関数

def fnc(*, a, b):
    pass
    
'''
    引数の主な種類は以上になります。
    もう少し細かく分類できなくも無いですが、これぐらいの粒度で理解しておけば全く問題ありません。

    なお、Pythonでは全ての引数が「参照渡し」となりますが、渡す値がミュータブルか否かで挙動に差が生じます。
    ミュータブルな値（リスト、辞書、集合など）であれば関数内で行う引数への変更が呼び出し元にも反映されますが、イミュータブルな値（数値、文字列、タプルなど）では反映されません。

'''
#ミュータブル/イミュータブルの差

def increment(x):
    x += 1
    
y = 2

increment(y)

print(y)

#ミュータブルの例

def rewrite(l):
    l[0] = "a"
    
    l[1] = "b"
    
    l[2] = "c"
    
lst = [0, 1, 2]

rewrite(lst)

print(lst)  #["a", "b", "c"]
