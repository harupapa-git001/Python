type(())

tpl = (1, "hoge", True)

tpl

tpl[2]

tpl[-1]

#tpl[0] = 999 #エラーになる出力

tpl = (1)

type(tpl)

tpl = ("nya")

type(tpl)

tpl = ("nya",)

type(tpl)

'''
    ．タプル型タプルはリストのように複数の要素をシーケンシャルに扱いますが、リストとは違ってイミュータブルなデータ型です。
    また、リストとは違ってタプル自身はメソッドを持ちません。タプル型のデータは丸括弧（普通の半角カッコ）の中に値をカンマで区切って宣言します。
    リストと同じく含める値の型は一致している必要がなく、何も指定しなければ空のタプルが生成されます。
    なお、要素へのアクセス方法もリストと全く同じですが（角括弧でのインデックス指定、負数指定時の動作）、含める要素が一つだけの場合は末尾にカンマを付けないと正しくタプルとして解釈されないのでこの点には注意しましょう。

    タプルは主に「複数の変数を一気に定義」したり、「関数の戻り値として複数の値を返却」するような場合に活躍します。


'''

'''ターミナルで下記の例を打ち込んで出力を確認してください

tpl = (1, "nya", True)

(a, b, c) = tpl

a

b

c

def sample():
    return("x", "y")
    
(x, y) = sample()

x

y

'''

'''
    次に、タプルに対して行える操作を幾つか紹介します。例文とコメントでまとめて確認してしまいましょう。

'''

'''ターミナルで下記の例を打ち込んで出力を確認してください

tpl = (1, 2, 3)

#タプルの連結

new_tpl = tpl + (4, 5)

new_tpl

#タプルの繰り返し

new_tpl = tpl * 3

new_tpl

#要素のスライス

tpl[0: 1]

tpl[1:]

tpl[:2]

#リストからタプルを生成する（tuple関数）

new_tpl = tuple(["nya", 999])

new_tpl

#タプルからリストを生成する（list関数）

new_lst = list((True, 123))

new_lst

'''

'''
    最後に、タプルにはリストのような内包表記は用意されていませんが、「ジェネレータ式」と言う仕組みを使って似たような記述ができます。

        どんな記述なのか例で確認しておきましょう。

'''

tpl = tuple(i * 2 for i in range(5))

tpl

'''
    タプルはターミナルでこのTuple.pyファイルをそのまま走らせてみると分かりますが、出力結果が出てきません。
'''
