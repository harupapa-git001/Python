ComplexComposition（複雑なコンポジション）

このファイル構成は main.py に対してモジュールを使います。

（ReadMeを除く全ての.pyファイルをデスクトップに並べて実行してください。）

manager.py は　secretary.py　を持っています。

client.py は secretary.py に予約を入れます。

secretary.py は client.py からの予約を受付して、予約の可否を照合し、予約状況を返します。

main.py は manager.py の予約機能のタスクを借りて、client.py の予約の方法（secretary.pyを連絡先として登録）で "adam" "charles" "dag" の予約を
secretary.py に問い合わせてブッキングし、最後に check_schedule の値を返します。

詳細は各.pyファイルを開いて確認してください。

このプログラムで注目してほしいことは、ClientのインスタンスがManagerの持つSecretaryのインスタンスを取得していることです。

このようにすることで特定のインスタンスを複数の異なるインスタンス間で共有することができ、その共有されたインスタンスを介してやりとりすることが可能です。

今回はManagerにget_secretary、Clientにset_contact_pointというメソッドを実装してやりとりしています。

ただ、インスタンスの受け渡しの方法はこれだけではなく、ぱっと思いつくだけでも以下の方法があります。

・コンストラクタでインスタンスを渡す
・get、setで渡す(今回の例)
・インスタンスの受け渡し専門のクラスを作る
・グローバル空間で共有する

やりかたはさまざまですが、それぞれにメリット・デメリットがあるので状況に応じて使い分ける必要があります。ベストプラクティスを知りたい場合は「デザインパターン」と呼ばれる設計方法について学ぶといいと思います。
