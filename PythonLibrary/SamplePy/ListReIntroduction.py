'''
    リスト再入門文字列と同じく、リストもオブジェクトです。そのため、まずは以前扱わなかったメソッドを使う処理を紹介します。
    リストにデータを追加する方法です。追加するといっても「リスト末尾への追加」と「リストの途中への追加」でやりかたが異なります。
    末尾への追加は appendメソッドを使い、間に追加するには insertを使います。

'''

a = [1, 2, 3]

a.append(4) #末尾への追加

print(a)

a.insert(1, 10) #１番目の要素に10を追加

print(a)

a = ["a", "b", "c", "d"]

a.remove("b")

print(a)

#a.remove(1)    #エラー文

'''
    removeメソッドはリストの中にある要素自体を指定してそれを消します。
    存在しない要素を指定するとエラーになりますので、含まれるかどうか分からない場合は in演算子で存在を確認したあとで removeして下さい。
    del演算子を使った要素の削除もできますが、こちらは removeメソッドとは異なり消す要素を「インデックス」で指定します。
    何番目の要素を消すか番号で指定するということです。これはスライシングやリスト末尾からの指定などもできます。

'''

a = [1, 2, 3, 4, 5]

del a[2]

print(a)

del a[1: 3]

print(a)

a = [1, 2, 3, 4, 5]

del a[1: 3]

print(a)

a = [1, 2, 3, 4, 5]

del a[-1]

print(a)

'''
    次に popメソッドです。
    これは del演算子に似ているのですが、消すだけではなく同時に値を取り出します。引数にインデックス番号(先頭が0)を渡せばそれに対応する要素を取得してリストから消します。
    
       引数を与えない場合はリスト末尾の要素を取り出します。

'''

a = [1, 2, 3, 4, 5]

b = a.pop(3)

print(a)

print(b)

c = a.pop()

print(a)

print(c)

'''
    様々なプログラミング言語でリストを使ってキューやスタックと呼ばれるデータ構造を実現することがよくあります。
    
       キュー及びスタックは複数のデータを管理するためのデータ構造です。
    キューは別名FIFO(FirstInFirstOut)とも呼ばれており、最初にいれたデータを最初に取り出すというデータ構造です。
    一方、スタックは LIFO(LastInFirstOut)と呼ばれており、その名前が示すように最後にいれたデータを最初に取り出すというデータ構造です。

    キュー及びスタックに1,2,3というデータが入っているとします。
    キューにデータ4をいれると1,2,3,4というデータを持ちます。
    そこからデータをとりだすと先頭(最初にいれたデータ)にある 1を取り出し、2,3,4となります。
    
    一方、スタックは最後にいれたデータを最初に取り出します。
    そのため、4をいれられて 1,2,3,4となっているデータから取り出されるのは4となります。
    リストへの追加には既に利用した appendメソッドを利用し、データの取り出しには popメソッドを使います。
    
    以下に listを使ったキューの実現方法を記載します。

'''

queue = [1, 2, 3]

queue.append(4)

print(queue)

a = queue.pop(0)

print(a)

print(queue)

'''
    appendでリストの最後にデータを追加し、pop(0)でリストの最初のデータを取り出しています。
    
    そして次にスタックです。

'''

stack = [1, 2, 3]

stack.append(4)

print(stack)

a = stack.pop()

print(a)

print(stack)

'''
    スタックからデータを取り出すということはつまり、リストの最後の要素を取り出すということです。
    そのため、引数なしの popメソッドでリストの最後の要素を取得します。次はリストとリストの結合です。
    
       これにはプラス演算子を使う方法と extendメソッドがあります。
    appendを使うと、appendされたリスト自体がメソッドを呼び出したリストの最後の要素になるので結合はされません。

'''

a = [1, 2, 3, 4]

b = [5, 6, 7, 8]

print(a + b)

a.extend(b)

print(a)

'''
    プラス演算子とextendメソッドは一見すると同じに見えますが、もとのデータがどうなるかという点でかなり違います。
    まずプラス演算子ですが、結合されているリストa,bはそのまま残り、両者が結合された新しいリストが作られています。
    一方、extendメソッドを使うと呼び出し元のリスト aの後ろに指定されたリストbが結合されます。
    
       リストb自体は変更が加わりませんが、リスト aはもとのデータではなくなっています。
       他にはリストの順序を反転するreverseメソッドや、中身の順序をソートする sortメソッドあたりも利用されます。

'''

a = [1, 2, 3, 4, 5]

a.reverse()

print(a)

b = [1, 3, 5, 2, 4]

b.sort()

print(b)

'''
    リストのコピーや初期化は以下のように行います。

'''

a = [1, 2, 3, 4, 5]

b = a.copy()

a.append(6)

print(a)

print(b)

a.clear()

print(a)

'''
    先にお伝えしたようにリストを格納する変数を別の変数に代入したとしても、それはコピーではなく同じオブジェクトを共有するだけです。

    つまり片方の変数の値を操作すると、もう片側の変数の値も変わっているということです。
    上記のようにコピーを行った場合は別々のオブジェクトとなるため片側の操作がもう片側に影響をあたえることはありません。

'''
