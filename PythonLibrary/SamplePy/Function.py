'''
    ６．関数
    関数は"def"キーワードに続けて名前を指定し、引数を括弧の中にカンマで区切って指定します。関数宣言、呼び出しの基本は次の通りです。

'''
#関数の基本
#引数がない関数

def fnc():
    pass
    
#引数がひとつの関数

def fnc2(v):
    pass
    
#引数が複数の関数

def fnc3(v1, v2):
    pass
    
def rect(w, h):
    return "幅は{}、高さは{}、面積は{}".format(w, h, w * h)
    
#関数呼び出し

print(rect(10, 20))

#引数名を指定して順番を無視することも可能

print(rect(h = 10, w = 20))

'''
    Pythonでは関数が第一級オブジェクトであるため、関数そのものを変数に代入したり他の関数の引数として渡したりすることができます。
    文章だとイメージすることが難しいかもしれませんが、例を見ればそれらが何を意味しているのか理解してもらえると思います。

'''
#第一級オブジェクトとしての関数

def fnc():
    print("nya")

#関数を変数に代入

nya = fnc

#変数に代入した関数の呼び出し

nya()   #nya

#「関数を引数として受け取る」関数の定義

def fnc2(f):
    f()
    
#関数を代入した変数を引数として関数に渡す

fnc2(nya)   #nya

'''
    次に、関数には「ドキュメンテーション文字列」を含めることができます。
    ドキュメンテーション文字列とは、関数定義やクラス定義の冒頭に付ける三重のクォートで囲った文字列のことで、"関数名.__doc__"で参照することができます。
    これは主に関数やクラスが「ナニモノなのか」を説明するために使用されるもので、基本的には各種組み込みオブジェクトにも付与されています。
    
    特別な理由がない限りは自作の関数にも常に付与するよう心がけましょう。

'''
#組み込み関数とドキュメンテーション文字列

print("---print関数---\n", print.__doc__)

print("---type関数---\n", type.__doc__)

#自作関数トドキュメンターション文字列

def fnc():
    '''\
    この関数は
    
    ドキュメンテーション文字列の
    
    サンプルです\
    '''
    
    pass
    
print(fnc.__doc__)

'''
    最後に、Pythonでは"lambda"式（ラムダ式）を使って無名関数を定義することができます。
    lambda式は「関数を式として扱う」ための仕組みで、無名関数はその名の通り「名前の無い関数」のことです。

'''
#lambda式と無名関数

fnc_lambda = lambda x: x * 2

print(fnc_lambda(1))    #2

print(fnc_lambda(3))    #6

#上と同じ意味の関数

def fnc_normal(x):
    return x * 2
    
print(fnc_normal(1))

print(fnc_normal(3))

'''
    例の通り、lambda式は"lambda引数:戻り値"の書式で扱います。
    lambda式についての詳しいことは別の節で説明していますので、一旦ここでは「無名関数の作り方」を覚えておいてください。

'''
