#関数を作る関数　クロージャ

def adder(x):

    #クロージャが返す関数
    
    def fun(y):
    
        #xはクロージャの引数、yは作成される関数の引数
    
        return x + y
    #作成した関数を返す
    #インデントを一段下げてreturnと同列にすると'NoneType' object is not callableエラーになります。
    
    return fun
    
adder5 = adder(5)
print(adder5(10))

adder7 = adder(7)
print(adder7(10))

'''
    関数adderは内部で関数funを作成し、それをreturn文で返しています。
    
    この adderがクロージャの関数で、内部の funはクロージャが作成する関数となります。
    
    注目して欲しいのは外側の関数であるadderの引数xを、内部で作成しているfunの中で利用しているということです。
    
    このxにはadderが呼び出された際に渡された値が入っています。
    具体的には"adder(5)"とした場合は5です。
    その際、内部の関数生成のコードは実質的に次のようなものとなっています。
    
    deffun(y):
        return 5 + y
        
        クロージャの xは 内部の関数にとっては 5と同じで、このとき xは 5として「束縛」されていると言われます。
        この内部の変数が5に束縛された関数がreturn文で返され、変数adder5に格納されます。
        当然ながらadder5は関数として利用可能で、その実行結果は関数生成の行の次に示されたとおり「 5 +渡された引数10」で15となっています。
        adderのなかの関数がテンプレートで、adder5がそれをベースにして作られた関数だと思ってもらえれば構いません。
        ただ、クロージャのコードを Pythonで見かけることはほとんどありません。
        
        関数渡しに比べるとその使いどころが難しいかもしれません。


'''
